// <auto-generated />
using System;
using App.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Migrations.Assessment_Db
{
    [DbContext(typeof(Assessment_DbContext))]
    [Migration("20250612110358_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("App.Models.Assessment_EachMonthStaticsDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TotalPerformances")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<int>("UserBranchPostId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserBranchPostId");

                    b.ToTable("EachMonthStatics");
                });

            modelBuilder.Entity("App.Models.Assessment_ExpertConsiderationDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConsiderationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExpertDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpertRefereeGuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("VpReferrerGuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceId");

                    b.ToTable("ExpertConsiderations");
                });

            modelBuilder.Entity("App.Models.Assessment_OldStaticsDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TotalMonths")
                        .HasColumnType("int");

                    b.Property<int>("TotalPerformances")
                        .HasColumnType("int");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<int>("UserBranchPostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserBranchPostId")
                        .IsUnique();

                    b.ToTable("OldStatics");
                });

            modelBuilder.Entity("App.Models.Assessment_PerformanceDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachedFileName")
                        .HasColumnType("longtext");

                    b.Property<string>("Attendees")
                        .HasColumnType("longtext");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChiefGuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChiefPost")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ConfirmDate")
                        .HasColumnType("longtext");

                    b.Property<string>("ConfirmerGuid")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("EndTime")
                        .HasColumnType("longtext");

                    b.Property<string>("EventPlace")
                        .HasColumnType("longtext");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LetterDate")
                        .HasColumnType("longtext");

                    b.Property<string>("LetterNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("LetterSubject")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderGuid")
                        .HasColumnType("longtext");

                    b.Property<string>("PerformDate")
                        .HasColumnType("longtext");

                    b.Property<string>("PerformanceField")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PerformanceType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Receiver")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegistrarGuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RegistrarPost")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReportDate")
                        .HasColumnType("longtext");

                    b.Property<string>("ReportNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityOpinion")
                        .HasColumnType("longtext");

                    b.Property<string>("StartTime")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("App.Models.Assessment_UserBranchPostStaticsDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserGuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPost")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserBranchPostStatics");
                });

            modelBuilder.Entity("App.Models.Assessment_EachMonthStaticsDbModel", b =>
                {
                    b.HasOne("App.Models.Assessment_UserBranchPostStaticsDbModel", "UserBranchPost")
                        .WithMany("EachMonthStatics")
                        .HasForeignKey("UserBranchPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBranchPost");
                });

            modelBuilder.Entity("App.Models.Assessment_ExpertConsiderationDbModel", b =>
                {
                    b.HasOne("App.Models.Assessment_PerformanceDbModel", "Performance")
                        .WithMany("ExpertConsiderations")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("App.Models.Assessment_OldStaticsDbModel", b =>
                {
                    b.HasOne("App.Models.Assessment_UserBranchPostStaticsDbModel", "UserBranchPost")
                        .WithOne("OldStatics")
                        .HasForeignKey("App.Models.Assessment_OldStaticsDbModel", "UserBranchPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserBranchPost");
                });

            modelBuilder.Entity("App.Models.Assessment_PerformanceDbModel", b =>
                {
                    b.Navigation("ExpertConsiderations");
                });

            modelBuilder.Entity("App.Models.Assessment_UserBranchPostStaticsDbModel", b =>
                {
                    b.Navigation("EachMonthStatics");

                    b.Navigation("OldStatics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
