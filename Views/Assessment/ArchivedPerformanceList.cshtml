@model Assessment_PerformanceList
@{
    string branchTitle = Context.RequestServices.GetRequiredService<IConfiguration>()["BranchTitle"] ?? "اداره";
    var configuration = Context.RequestServices.GetRequiredService<IConfiguration>();
    var performanceStatus = Context.RequestServices.GetRequiredService<Assessment_Info>().PerformanceStatus;
}
<!-------------------------------------------------->
<link rel="stylesheet" type="text/css" href="/Codes/jalalidatepicker.min.css" />
<script type="text/javascript" src="/Codes/jalalidatepicker.min.js"></script>

<div id="button-container" class="clearfix">
    <style>
        #button-container {
            width: 90%;
            margin: auto;
        }

        @@media screen and (max-width: 1200px) {
            #button-container {
                width: 100%;
            }
        }

        #button-container a,
        #button-container button {
            /*float: right;*/
            padding: 10px 10px;
            color: white;
            font-size: 14px;
            /*font-weight: 500;*/
            background-color: rgb(105, 29, 105);
            border: none;
            border-radius: 5px;
            text-decoration: none;
            cursor: pointer;
            margin: 10px;
            display: inline-block;
            width: fit-content;
            opacity: 0.8;
            text-align: center;
        }

        /*#button-container a {
                background-color: gray;
            }*/

        #button-container a:hover,
        #button-container button:hover {
            opacity: 1;
        }

        #button-container input,
        #button-container select {
            padding: 10px 10px;
            border-radius: 5px;
            border: 1px solid gray;
            width: 150px;
        }
    </style>

    <form asp-action="ListOfPerformances" method="get">
        <input type="text" data-jdp asp-for="FromDate" placeholder="از تاریخ..">
        <input type="text" data-jdp asp-for="ToDate" placeholder="تا تاریخ..">
        <button type="submit">جستجو</button>
    </form>

    <style>
        #title-for-list {
            background-color: white;
            width: fit-content;
            margin: 5px 0;
            padding: 1px;
            color: #111;
        }

        #title-for-list span {
            background-color: rgba(255, 165, 0, 0.5);
        }
    </style>
    <p id="title-for-list">
        لیست عملکردهای آرشیو شده
        
        @if (Model.FromDate == null)
        {
            <span>از ابتدا</span> @:,
        }
        else
        {
            <span>از تاریخ @Model.FromDate</span> @:,
        }
        @if (Model.ToDate == null)
        {
            <span>تا امروز</span>
        }
        else
        {
            <span>تا تاریخ @Model.ToDate</span>
        }
    </p>
</div>

<div id="table69cbcffed58f432f8a574e34d072ed73">
    <style>
        /* Customize the label (the container) */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .container {
            display: block;
            position: relative;
            padding-left: 35px;
            /*margin-bottom: 12px;*/
            cursor: pointer;
            font-size: 22px;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        /* Hide the browser's default checkbox */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .container input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }

        /* Create a custom checkbox */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .checkmark {
            position: absolute;
            top: -12px;
            left: 0;
            height: 25px;
            width: 25px;
            border-radius: 10px;
            border: 1px solid lightgray;
        }

        /* On mouse-over, add a grey background color */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .container:hover input~.checkmark {
            background-color: #ccc;
        }

        /* When the checkbox is checked, add a blue background */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .container input:checked~.checkmark {
            background-color: #008cff;
        }

        /* Create the checkmark/indicator (hidden when not checked) */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .checkmark:after {
            content: "";
            position: absolute;
            display: none;
        }

        /* Show the checkmark when checked */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .container input:checked~.checkmark:after {
            display: block;
        }

        /* Style the checkmark/indicator */
        #table69cbcffed58f432f8a574e34d072ed73 .formbd815e99e0f2479ab098c05b6dfc81f7 .container .checkmark:after {
            left: 8px;
            top: 4px;
            width: 5px;
            height: 10px;
            border: solid white;
            border-width: 0 2px 2px 0;
            -webkit-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
            transform: rotate(45deg);
        }

        /****************************************************************************************/
        #table69cbcffed58f432f8a574e34d072ed73 {
            width: 90%;
            background-color: rgba(250, 250, 250, 1);
            margin: 0px auto;
            min-width: 800px;
        }

        @@media screen and (max-width: 1200px) {
            #table69cbcffed58f432f8a574e34d072ed73 {
                width: 100%;
            }
        }

        #table69cbcffed58f432f8a574e34d072ed73 table {
            border: none;
            width: 100%;
            border-collapse: collapse;
            border-spacing: 0;
            text-align: center;
            font-size: 14px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr {
            border-radius: 20px;
            transition: box-shadow 0.1s;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr.fadeTR {
            opacity: 0.7;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr:not(:first-child):hover {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            background-color: white;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr:first-child {
            background-color: rgb(236, 236, 236);
            border: none;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr th:first-child,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:first-child {
            border-radius: 0 15px 15px 0;
            /*border-radius: 15px 0 0 15px;*/
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr th:last-child,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child {
            border-radius: 15px 0 0 15px;
            /*border-radius: 0 15px 15px 0;*/
        }

        #table69cbcffed58f432f8a574e34d072ed73 th,
        #table69cbcffed58f432f8a574e34d072ed73 td {
            border: none;
            margin: 0;
            padding: 10px 10px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th {
            padding: 10px;
            color: gray;
            font-weight: normal;
            text-wrap: nowrap;
        }

        /*#table69cbcffed58f432f8a574e34d072ed73 td.functions-td {
            min-width: 300px;
            text-align: center;
        }*/

        #table69cbcffed58f432f8a574e34d072ed73 tr td.bold {
            font-weight: bold;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span {
            padding: 5px 10px;
            font-size: 12px;
            border-radius: 10px;
        }

        /******************* color ****************/

        #table69cbcffed58f432f8a574e34d072ed73 tr td.gray {
            color: gray;
            font-size: 12px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.red {
            color: rgb(221, 0, 0);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.green {
            color: green;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.blue {
            color: blue;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.bg-red {
            background-color: rgba(255, 0, 0, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.bg-green {
            background-color: rgba(124, 252, 0, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.bg-blue {
            background-color: rgba(135, 206, 235, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 table a {
            text-decoration: none;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child a,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child button {
            padding: 10px 20px;
            color: blue;
            font-size: 12px;
            background-color: rgba(0, 0, 0, 0);
            border-radius: 20px;
            border: 1px solid lightgray;
            cursor: pointer;
            font-weight: bold;
            display: inline-block;
            /*float: right;*/

        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child a:hover,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child button:hover {
            background-color: rgba(135, 206, 235, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 th span.triangle {
            font-size: 22px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th span.triangle.down {
            font-size: 20px;
            position: relative;
            /*left: -15px;*/
            right: -15px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th.clickable {
            cursor: pointer;
            position: relative;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th.clickable:hover {
            color: black;
        }
    </style>

    <p style="margin: 10px auto;text-align: center;">تعداد عملکردهای
        لیست شده:
        <span id="numberOfUsersCounter-span"></span>
    </p>
    <div id="searchBox">
        <!-------------------------------------------------------->
        <style>
            #searchBox {
                display: flex;
                flex-direction: row;
                justify-content: space-around;
            }

            .searchForm {
                width: 30%;
            }

            .searchForm input[type=text],
            .searchForm select {
                width: 70%;
                font-size: 16px;
                padding: 5px 10px;
                border-radius: 5px;
                border: 1px solid gray;
                color: #222;
            }

            .searchForm button[type=submit] {
                font-size: 16px;
                padding: 5px 10px;
                border-radius: 5px;
                border: 1px solid gray;
                cursor: pointer;
                background-color: white;
                color: gray;
            }

            .searchForm button[type=submit]:hover {
                color: black;
            }
        </style>
        <form class="searchForm">
            <input type="text" class="searchInput" id="fullnameSearchInput"
                onkeyup="filter_fullname_Script_a0d21024282f453f8247fefa6ec435f2(this)" placeholder="ثبت کننده..">
        </form>
        <form class="searchForm">
            <input type="text" class="searchInput" id="branchSearchInput"
                onkeyup="filter_branch_Script_a0d21024282f453f8247fefa6ec435f2(this)" placeholder="@branchTitle..">
        </form>
        <form class="searchForm">
            <input type="text" class="searchInput"
                onkeyup="filter_perfType_Script_a0d21024282f453f8247fefa6ec435f2(this)" placeholder="نوع عملکرد..">
            <!--button type="submit"><i class="fa fa-search"></i></button-->
        </form>
        <form class="searchForm">
            <select name="" id="" onchange="filter_perfField_Script_a0d21024282f453f8247fefa6ec435f2(this)">
                <option value="">همه زمینه ها</option>
                @foreach (var field in configuration.GetSection("PerformanceFields").Get<List<string>>() ?? [])
                {
                    <option value="@field">@field</option>
                }
            </select>
        </form>
        <form class="searchForm">
            <input type="text" class="searchInput" id="postSearchInput"
                onkeyup="filter_date_Script_a0d21024282f453f8247fefa6ec435f2(this)" placeholder="تاریخ..">
        </form>
        <form class="searchForm">
            <select name="" id="" onchange="filter_state_Script_a0d21024282f453f8247fefa6ec435f2(this)">
                <option value="">همه وضعیت</option>
                @foreach (string status in performanceStatus.Values)
                {
                    <option value="@status">@status</option>
                }
            </select>
        </form>
        <script>
            function filter_fullname_Script_a0d21024282f453f8247fefa6ec435f2(inputElement) {
                let mainTable = document.getElementById("filterTable9bac668ddd8841f590416eafec7f6f80");
                // Declare variables
                let filter, filteredTRs, filterTDs, i, txtValue, n = 0;
                //inputElement = mainTable_searche62f342a43f0412baf7908d6236c65ec.querySelector('#myInput');
                filter = inputElement.value.toUpperCase();
                filteredTRs = mainTable.getElementsByClassName('filterTR');

                // Loop through all list items, and hide those who don't match the search query
                for (i = 0; i < filteredTRs.length; i++) {
                    filterTDs = filteredTRs[i].getElementsByClassName("filterTD-FullName")[0];
                    txtValue = filterTDs.textContent || filterTDs.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        filteredTRs[i].style.display = "";
                        n++;
                    } else {
                        filteredTRs[i].style.display = "none";
                    }
                }

                countUsers(n);
            }

            function filter_branch_Script_a0d21024282f453f8247fefa6ec435f2(inputElement) {
                let mainTable = document.getElementById("filterTable9bac668ddd8841f590416eafec7f6f80");
                // Declare variables
                let filter, filteredTRs, filterTDs, i, txtValue, n = 0;
                //inputElement = mainTable_searche62f342a43f0412baf7908d6236c65ec.querySelector('#myInput');
                filter = inputElement.value.toUpperCase();
                filteredTRs = mainTable.getElementsByClassName('filterTR');

                // Loop through all list items, and hide those who don't match the search query
                for (i = 0; i < filteredTRs.length; i++) {
                    filterTDs = filteredTRs[i].getElementsByClassName("filterTD-Branch")[0];
                    txtValue = filterTDs.textContent || filterTDs.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        filteredTRs[i].style.display = "";
                        n++;
                    } else {
                        filteredTRs[i].style.display = "none";
                    }
                }

                countUsers(n);
            }

            function filter_state_Script_a0d21024282f453f8247fefa6ec435f2(inputElement) {
                let mainTable = document.getElementById("filterTable9bac668ddd8841f590416eafec7f6f80");
                // Declare variables
                let filter, filteredTRs, filterTDs, i, txtValue, n = 0;
                //inputElement = mainTable_searche62f342a43f0412baf7908d6236c65ec.querySelector('#myInput');
                filter = inputElement.value.toUpperCase();
                filteredTRs = mainTable.getElementsByClassName('filterTR');

                // Loop through all list items, and hide those who don't match the search query
                for (i = 0; i < filteredTRs.length; i++) {
                    filterTDs = filteredTRs[i].getElementsByClassName("filterTD-State")[0];
                    txtValue = filterTDs.textContent || filterTDs.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        filteredTRs[i].style.display = "";
                        n++;
                    } else {
                        filteredTRs[i].style.display = "none";
                    }
                }

                countUsers(n);
            }

            function filter_perfType_Script_a0d21024282f453f8247fefa6ec435f2(inputElement) {
                let mainTable = document.getElementById("filterTable9bac668ddd8841f590416eafec7f6f80");
                // Declare variables
                let filter, filteredTRs, filterTDs, i, txtValue, n = 0;
                //inputElement = mainTable_searche62f342a43f0412baf7908d6236c65ec.querySelector('#myInput');
                filter = inputElement.value.toUpperCase();
                filteredTRs = mainTable.getElementsByClassName('filterTR');

                // Loop through all list items, and hide those who don't match the search query
                for (i = 0; i < filteredTRs.length; i++) {
                    filterTDs = filteredTRs[i].getElementsByClassName("filterTD-Type")[0];
                    txtValue = filterTDs.textContent || filterTDs.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        filteredTRs[i].style.display = "";
                        n++;
                    } else {
                        filteredTRs[i].style.display = "none";
                    }
                }

                countUsers(n);
            }

            function filter_perfField_Script_a0d21024282f453f8247fefa6ec435f2(inputElement) {
                let mainTable = document.getElementById("filterTable9bac668ddd8841f590416eafec7f6f80");
                // Declare variables
                let filter, filteredTRs, filterTDs, i, txtValue, n = 0;
                //inputElement = mainTable_searche62f342a43f0412baf7908d6236c65ec.querySelector('#myInput');
                filter = inputElement.value.toUpperCase();
                filteredTRs = mainTable.getElementsByClassName('filterTR');

                // Loop through all list items, and hide those who don't match the search query
                for (i = 0; i < filteredTRs.length; i++) {
                    filterTDs = filteredTRs[i].getElementsByClassName("filterTD-Field")[0];
                    txtValue = filterTDs.textContent || filterTDs.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        filteredTRs[i].style.display = "";
                        n++;
                    } else {
                        filteredTRs[i].style.display = "none";
                    }
                }

                countUsers(n);
            }

            function filter_date_Script_a0d21024282f453f8247fefa6ec435f2(inputElement) {
                let mainTable = document.getElementById("filterTable9bac668ddd8841f590416eafec7f6f80");
                // Declare variables
                let filter, filteredTRs, filterTDs, i, txtValue, n = 0;
                //inputElement = mainTable_searche62f342a43f0412baf7908d6236c65ec.querySelector('#myInput');
                filter = inputElement.value.toUpperCase();
                filteredTRs = mainTable.getElementsByClassName('filterTR');

                // Loop through all list items, and hide those who don't match the search query
                for (i = 0; i < filteredTRs.length; i++) {
                    filterTDs = filteredTRs[i].getElementsByClassName("filterTD-Date")[0];
                    txtValue = filterTDs.textContent || filterTDs.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        filteredTRs[i].style.display = "";
                        n++;
                    } else {
                        filteredTRs[i].style.display = "none";
                    }
                }

                countUsers(n);
            }

            function countUsers(n) {
                let userCountSpan = document.getElementById("numberOfUsersCounter-span");
                userCountSpan.innerHTML = n;
            }
        </script>
        <!-------------------------------------------------------->
    </div>
    <!---------------------------------- users list -------------------------------------->
    <table id="filterTable9bac668ddd8841f590416eafec7f6f80">
        <tbody>
            <tr>
                <th>Image</th>
                <th>ثبت کننده</th>
                <th>سمت</th>

                <th class="clickable" onclick="sortTable_Script_21a191e39d5d4e93afa2a2d0a230a902(this, 2)">
                    @branchTitle
                    <span class="triangle up">▴</span>
                    <span class="triangle down">▾</span>
                </th>

                <th>نوع عملکرد</th>
                <th>زمینه عملکرد</th>

                <th class="clickable" onclick="sortTable_Script_21a191e39d5d4e93afa2a2d0a230a902(this, 5)">
                    تاریخ ثبت
                    <span class="triangle up">▴</span>
                    <span class="triangle down">▾</span>
                </th>

                <th>وضعیت</th>

                <th class="clickable" onclick="sortTable_Script_823253cc22454a5db45bb30b06747555(this, 7)">
                    امتیاز
                    <span class="triangle up">▴</span>
                    <span class="triangle down">▾</span>
                </th>

                <th>عملیات</th>
            </tr>
            @foreach (var performance in Model.Performances)
            {
                string fade = "fadeTR";
                if (User.Identity != null && User.Identity.IsAuthenticated && User.Identity.Name != "admin")
                {
                    if (User.IsInRole("Performance_Registrars") &&
                    (performance.Status == "edit" ||
                    performance.Status == "reject"))
                    {
                        fade = "";
                    }
                    else if (User.IsInRole("Performance_Confirmers") &&
                    performance.Status == "confirm")
                    {
                        fade = "";
                    }
                    else if (User.IsInRole("VP_Referrers") &&
                    performance.Status == "vp" &&
                    !performance.ExpertConsiderations.Any(ec => ec.ConsiderationDate == null))
                    {
                        fade = "";
                    }
                    else if (User.IsInRole("Expert_Referees") &&
                    performance.Status == "expert" &&
                    (performance.ExpertConsiderations.Any(ec => ec.ExpertReferee?.UserName == User.Identity.Name &&
                    ec.ConsiderationDate == null)))
                    {
                        fade = "";
                    }
                }
                <tr class="filterTR @fade">
                    <td>
                        <img class="profile-img"
                            src="/Account/ClientImage?username=@performance.Registrar?.UserName&v=@performance.Registrar?.Version"
                            style="width: 50px;height:50px;border-radius:50%;float:right;">
                    </td>
                    <td class="filterTD-FullName">
                        <a asp-controller="Account" asp-action="Profile"
                            asp-route-userGuid="@performance.Registrar?.UserGuid">@performance.Registrar?.FullName</a>
                    </td>
                    <td class="filterTD-Post">
                        @performance.RegistrarPost
                    </td>

                    <td class="filterTD-Branch">
                        <a asp-action="ScoreList" asp-route-Branch="@performance.Branch">@performance.Branch</a>
                    </td>

                    <td class="filterTD-Type">@performance.PerformanceType</td>
                    <td class="filterTD-Field">@performance.PerformanceField</td>
                    <td class="filterTD-Date">@performance.RegisterDate</td>
                    <td class="bold filterTD-State">@performanceStatus[performance.Status]</td>
                    @if (performance.ExpertConsiderations.Any(ec => ec.Score > 0))
                    {
                        int score = performance.ExpertConsiderations.FirstOrDefault(ec => ec.Score > 0)!.Score;
                        <td class="bold">@score</td>
                    }
                    else
                    {
                        <td class="bold">-</td>
                    }
                    <td class="functions-td">
                        <a asp-action="ArchivedPerformance" asp-route-guid="@performance.Guid">
                            مشاهده
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<script>/*
Script_823253cc22454a5db45bb30b06747555
 
sorts table by number by click on table head
*/
    function sortTable_Script_823253cc22454a5db45bb30b06747555(element, n) {
        let upTriangle = element.getElementsByClassName("up")[0];
        let downTriangle = element.getElementsByClassName("down")[0];

        let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
        let table = element.parentElement.parentElement;
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        upTriangle.style.visibility = "visible";
        downTriangle.style.visibility = "hidden";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                tableData = rows[i].getElementsByTagName("TD")[n];
                nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (Number(tableData.innerText) > Number(nextTableData.innerText)) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (Number(tableData.innerText) < Number(nextTableData.innerText)) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                    upTriangle.style.visibility = "hidden";
                    downTriangle.style.visibility = "visible";
                }
            }
        }

    }
</script>

<script>
    /*Script_7f93fc1a6ee040718d57e78df9d58200
    sorts table by date by click on table head*/

    function sortTable_Script_d321834585ae45f0b2e5190c2f7b476b(element, n) {
        let upTriangle = element.getElementsByClassName("up")[0];
        let downTriangle = element.getElementsByClassName("down")[0];

        let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
        let table = element.parentElement.parentElement;
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        upTriangle.style.visibility = "visible";
        downTriangle.style.visibility = "hidden";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                tableData = rows[i].getElementsByTagName("TD")[n];
                nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (Date.parse(tableData.innerText) > Date.parse(nextTableData.innerText)) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (Date.parse(tableData.innerText) < Date.parse(nextTableData.innerText)) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                    upTriangle.style.visibility = "hidden";
                    downTriangle.style.visibility = "visible";
                }
            }
        }

    }
</script>

<script>
    /*Script_7f93fc1a6ee040718d57e78df9d58200
    sorts table by name by click on table head*/

    function sortTable_Script_21a191e39d5d4e93afa2a2d0a230a902(element, n) {
        let upTriangle = element.getElementsByClassName("up")[0];
        let downTriangle = element.getElementsByClassName("down")[0];

        let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
        let table = element.parentElement.parentElement;
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        upTriangle.style.visibility = "visible";
        downTriangle.style.visibility = "hidden";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                tableData = rows[i].getElementsByTagName("TD")[n];
                nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (tableData.innerText > nextTableData.innerText) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (tableData.innerText < nextTableData.innerText) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                    upTriangle.style.visibility = "hidden";
                    downTriangle.style.visibility = "visible";
                }
            }
        }

    }
</script>

<script>
    let userCountSpan = document.getElementById("numberOfUsersCounter-span");
    let mainTable = document.getElementById("filterTable9bac668ddd8841f590416eafec7f6f80");
    userCountSpan.innerHTML = mainTable.getElementsByTagName("TR").length - 1;
</script>

<script>
    jalaliDatepicker.startWatch({
        //minDate: "attr",
        //maxDate: "attr"
        persianDigits: true,
    });
</script>

<!---------------- Pagination ----------------->
<partial name="Pagination" />

