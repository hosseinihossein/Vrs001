@model Orders_OpenModel
@{
    string branchTitle = Context.RequestServices.GetRequiredService<IConfiguration>()["BranchTitle"] ?? "اداره";
}
<div id="cbc724a1a02c47dea6a722260c71d5ac">

    <style>
        #cbc724a1a02c47dea6a722260c71d5ac {
            width: 80vw;
            height: fit-content;
            background-color: white;
            margin: 50px auto 0;
            box-shadow: 0 0 3px lightgray;
            padding: 20px;
            position: relative;
        }

        #cbc724a1a02c47dea6a722260c71d5ac::before {
            content: "مشاهده درخواست";
            position: absolute;
            background-color: white;
            box-shadow: 0 0 3px lightgray;
            padding: 10px 20px;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
        }

        #cbc724a1a02c47dea6a722260c71d5ac .input-box {
            border: 2px solid rgb(220, 220, 220, 0.5);
            padding: 10px 15px;
            border-radius: 5px;
            float: right;
            margin: 2%;
            height: fit-content;
            min-height: 75px;
            background-color: white;
        }



        #cbc724a1a02c47dea6a722260c71d5ac .input-box.one {
            width: 96%;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .input-box.two {
            width: 46%;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .input-box.three {
            width: 29.3%;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .input-box label {
            display: block;
            width: 100%;
            font-size: 13px;
            font-weight: bold;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .input-box label span {
            float: left;
            color: red;
            font-size: 18px;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .input-box input,
        #cbc724a1a02c47dea6a722260c71d5ac .input-box select,
        #cbc724a1a02c47dea6a722260c71d5ac .input-box textarea {
            border: none;
            padding: 10px 0 0 0;
            font-size: 18px;
            width: 100%;
            max-width: 100%;
            min-width: 100%;
            color: #444;
            /*text-transform: uppercase;*/
        }

        #cbc724a1a02c47dea6a722260c71d5ac .button-container {
            width: 100%;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .button-container a,
        #cbc724a1a02c47dea6a722260c71d5ac .button-container button {
            float: right;
            padding: 15px 30px;
            color: white;
            font-size: 18px;
            font-weight: 500;
            background-color: rgb(105, 29, 105);
            border: none;
            border-radius: 5px;
            text-decoration: none;
            text-transform: uppercase;
            cursor: pointer;
            margin: 2%;
            display: block;
            width: fit-content;
            opacity: 0.8;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .button-container a {
            background-color: gray;
        }

        #cbc724a1a02c47dea6a722260c71d5ac .button-container a:hover,
        #cbc724a1a02c47dea6a722260c71d5ac .button-container button:hover {
            opacity: 1;
        }

        @@media only screen and (max-width: 800px) {
            #cbc724a1a02c47dea6a722260c71d5ac {
                width: 100%;
            }
        }

        @@media only screen and (max-width: 600px) {

            #cbc724a1a02c47dea6a722260c71d5ac .input-box.one {
                width: 96%;
            }

            #cbc724a1a02c47dea6a722260c71d5ac .input-box.two {
                width: 96%;
            }

            #cbc724a1a02c47dea6a722260c71d5ac .input-box.three {
                width: 96%;
            }
        }
    </style>

    <form id="form_cbc724a1a02c47dea6a722260c71d5ac">
        <div class="clearfix">
            <div class="input-box one">
                <label for="Registrar">ثبت کننده درخواست</label>
                <input readonly type="text" id="Registrar" name="Registrar" value="@Model.Registrar?.FullName">
            </div>
        </div>
        <div class="clearfix">
            <div class="input-box two">
                <label for="PerformanceType">نوع عملکرد</label>
                <input readonly type="text" id="PerformanceType" name="PerformanceType" value="@Model.PerformanceType">
            </div>
            <div class="input-box two">
                <label for="PerformanceField">زمینه عملکرد</label>
                <input readonly type="text" id="PerformanceField" name="PerformanceField"
                    value="@Model.PerformanceField">
            </div>
        </div>
        <div class="clearfix">
            <div class="input-box two">
                <label for="RegisterDate">تاریخ ثبت درخواست</label>
                <input readonly type="text" id="RegisterDate" name="RegisterDate"
                    value='@Model.RegisterDate.ToString("yyyy/MM/dd", new CultureInfo("fa-IR"))'>
            </div>
            <div class="input-box two" style="border-color: rgba(255, 0, 0, 0.5);">
                <label for="Deadline">مهلت انجام درخواست</label>
                <input readonly type="text" id="Deadline" name="Deadline"
                    value='@Model.Deadline.ToString("yyyy/MM/dd", new CultureInfo("fa-IR"))'>
            </div>
        </div>
        <div class="clearfix">
            <div class="input-box one">
                <label for="Subject">موضوع درخواست</label>
                <input readonly type="text" id="Subject" name="Subject" value="@Model.Subject">
            </div>
        </div>
        <div class="clearfix">
            <div class="input-box one">
                <label for="Description">شرح درخواست</label>
                <textarea readonly name="Description" id="Description">@Model.Description</textarea>
            </div>
        </div>
        <script>
            let textAreas = document.getElementsByTagName("textarea");
            for (let ta of textAreas) {
                ta.style.height = "0";
                ta.style.height = (ta.scrollHeight + 20) + "px";
            }
        </script>
    </form>

</div>

<h3 style="text-align: center;">
    لطفا توجه بفرمایید، پس از رسیدگی و انجام این درخواست شما میتوانید از طریق لینک زیر
    برای ثبت مستندات عملکرد خود اقدام
    فرمایید!
</h3>

<div id="table69cbcffed58f432f8a574e34d072ed73">
    <style>
        /****************************************************************************************/
        #table69cbcffed58f432f8a574e34d072ed73 {
            width: 90%;
            background-color: rgba(250, 250, 250, 1);
            margin: 20px auto 100px;
            min-width: 400px;
            overflow: auto;
        }

        @@media screen and (max-width: 1000px) {
            #table69cbcffed58f432f8a574e34d072ed73 {
                width: 100%;
            }
        }

        #table69cbcffed58f432f8a574e34d072ed73 table {
            border: none;
            width: 100%;
            border-collapse: collapse;
            border-spacing: 0;
            text-align: center;
            font-size: 14px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr {
            border-radius: 20px;
            transition: box-shadow 0.1s;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr.green {
            background-color: rgba(124, 252, 0, 0.8);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr.orange {
            background-color: rgba(255, 165, 0, 0.8);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr.red {
            background-color: rgba(255, 0, 0, 0.8);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr:not(:first-child):hover {
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            background-color: white;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr:first-child {
            background-color: rgb(236, 236, 236);
            border: none;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr th:first-child,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:first-child {
            border-radius: 0 15px 15px 0;
            /*border-radius: 15px 0 0 15px;*/
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr th:last-child,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child {
            border-radius: 15px 0 0 15px;
            /*border-radius: 0 15px 15px 0;*/
        }

        #table69cbcffed58f432f8a574e34d072ed73 th,
        #table69cbcffed58f432f8a574e34d072ed73 td {
            border: none;
            margin: 0;
            padding: 10px 10px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th {
            padding: 10px;
            color: gray;
            font-weight: normal;
            text-wrap: nowrap;
        }

        /*#table69cbcffed58f432f8a574e34d072ed73 td.functions-td {
            min-width: 300px;
            text-align: center;
        }*/

        #table69cbcffed58f432f8a574e34d072ed73 tr td.bold {
            font-weight: bold;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span {
            padding: 5px 10px;
            font-size: 12px;
            border-radius: 10px;
        }

        /******************* color ****************/

        #table69cbcffed58f432f8a574e34d072ed73 tr td.gray {
            color: gray;
            font-size: 12px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.red {
            color: rgb(221, 0, 0);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.green {
            color: green;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.blue {
            color: blue;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.bg-red {
            background-color: rgba(255, 0, 0, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.bg-green {
            background-color: rgba(124, 252, 0, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td span.bg-blue {
            background-color: rgba(135, 206, 235, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 table a {
            text-decoration: none;
        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child a,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child button {
            padding: 10px 20px;
            color: blue;
            font-size: 12px;
            background-color: rgba(0, 0, 0, 0);
            border-radius: 20px;
            border: 1px solid lightgray;
            cursor: pointer;
            font-weight: bold;
            display: inline-block;
            /*float: right;*/

        }

        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child a:hover,
        #table69cbcffed58f432f8a574e34d072ed73 tr td:last-child button:hover {
            background-color: rgba(135, 206, 235, 0.2);
        }

        #table69cbcffed58f432f8a574e34d072ed73 th span.triangle {
            font-size: 22px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th span.triangle.down {
            font-size: 20px;
            position: relative;
            /*left: -15px;*/
            right: -15px;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th.clickable {
            cursor: pointer;
            position: relative;
        }

        #table69cbcffed58f432f8a574e34d072ed73 th.clickable:hover {
            color: black;
        }
    </style>

    <!---------------------------------- users list -------------------------------------->
    <table id="filterTable9bac668ddd8841f590416eafec7f6f80">
        <tbody>
            <tr>
                <th class="clickable" onclick="sortTable_Script_21a191e39d5d4e93afa2a2d0a230a902(this, 0)">
                    @branchTitle
                    <span class="triangle up">▴</span>
                    <span class="triangle down">▾</span>
                </th>
                <th class="clickable" onclick="sortTable_Script_21a191e39d5d4e93afa2a2d0a230a902(this, 1)">
                    تاریخ انجام
                    <span class="triangle up">▴</span>
                    <span class="triangle down">▾</span>
                </th>
                <th class="clickable" onclick="sortTable_Script_823253cc22454a5db45bb30b06747555(this, 2)">
                    تعداد عملکرد
                    <span class="triangle up">▴</span>
                    <span class="triangle down">▾</span>
                </th>
                <th class="clickable" onclick="sortTable_Script_823253cc22454a5db45bb30b06747555(this, 3)">
                    مجموع امتیازات
                    <span class="triangle up">▴</span>
                    <span class="triangle down">▾</span>
                </th>

                <th>عملیات</th>
            </tr>
            @foreach (var bp in Model.BranchPerformances)
            {
                DateTime? registerDate = bp.Value.OrderBy(p => p.RegisterDate).FirstOrDefault()?.RegisterDate;
                string bgColor = "red";
                if (registerDate is not null)
                {
                    bgColor = registerDate <= Model.Deadline ? "green" : "orange";
                }
                <tr class="filterTR @bgColor">
                    <td class="filterTD-Branch">
                        @bp.Key
                    </td>
                    <td>
                        @(registerDate?.ToString("yyyy/MM/dd", new CultureInfo("fa-IR")) ?? "_")
                    </td>
                    <td>@(bp.Value.Count == 0 ? "_" : bp.Value.Count)</td>
                    <td>@(bp.Value.Count == 0 ? "_" : bp.Value.SelectMany(p => p.ExpertConsiderations).Sum(ec => ec.Score))
                    </td>
                    <td class="functions-td">
                        @if (User.IsInRole("Can_Watch_Backgrounds") || (User.IsInRole("Branch_Chiefs") &&
                                            Model.MeOpener.Branch == bp.Key) /*|| User.IsInRole("Expert_Referees")*/)
                        {
                            <a asp-controller="Assessment" asp-action="ListOfPerformances" asp-route-Branch="@bp.Key"
                                asp-route-orderGuid="@Model.Guid">
                                مشاهده
                            </a>
                        }
                        @if (User.IsInRole("Performance_Registrars") && Model.MeOpener.Branch == bp.Key)
                        {
                            <a asp-controller="Assessment" asp-action="SubmitNewPerformance"
                                asp-route-type="@Model.PerformanceType" asp-route-field="@Model.PerformanceField"
                                asp-route-orderGuid="@Model.Guid">
                                ثبت عملکرد
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <script>/*
Script_823253cc22454a5db45bb30b06747555
 
sorts table by number by click on table head
*/
        function sortTable_Script_823253cc22454a5db45bb30b06747555(element, n) {
            let upTriangle = element.getElementsByClassName("up")[0];
            let downTriangle = element.getElementsByClassName("down")[0];

            let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
            let table = element.parentElement.parentElement;
            switching = true;
            //Set the sorting direction to ascending:
            dir = "asc";
            upTriangle.style.visibility = "visible";
            downTriangle.style.visibility = "hidden";
            /*Make a loop that will continue until
            no switching has been done:*/
            while (switching) {
                //start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /*Loop through all table rows (except the
                first, which contains table headers):*/
                for (i = 1; i < (rows.length - 1); i++) {
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                    one from current row and one from the next:*/
                    tableData = rows[i].getElementsByTagName("TD")[n];
                    nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                    /*check if the two rows should switch place,
                    based on the direction, asc or desc:*/
                    if (dir == "asc") {
                        if (Number(tableData.innerText) > Number(nextTableData.innerText)) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (Number(tableData.innerText) < Number(nextTableData.innerText)) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    //Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /*If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again.*/
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                        upTriangle.style.visibility = "hidden";
                        downTriangle.style.visibility = "visible";
                    }
                }
            }

        }
    </script>

    <script>
        /*Script_7f93fc1a6ee040718d57e78df9d58200
        sorts table by date by click on table head*/

        function sortTable_Script_d321834585ae45f0b2e5190c2f7b476b(element, n) {
            let upTriangle = element.getElementsByClassName("up")[0];
            let downTriangle = element.getElementsByClassName("down")[0];

            let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
            let table = element.parentElement.parentElement;
            switching = true;
            //Set the sorting direction to ascending:
            dir = "asc";
            upTriangle.style.visibility = "visible";
            downTriangle.style.visibility = "hidden";
            /*Make a loop that will continue until
            no switching has been done:*/
            while (switching) {
                //start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /*Loop through all table rows (except the
                first, which contains table headers):*/
                for (i = 1; i < (rows.length - 1); i++) {
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                    one from current row and one from the next:*/
                    tableData = rows[i].getElementsByTagName("TD")[n];
                    nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                    /*check if the two rows should switch place,
                    based on the direction, asc or desc:*/
                    if (dir == "asc") {
                        if (Date.parse(tableData.innerText) > Date.parse(nextTableData.innerText)) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (Date.parse(tableData.innerText) < Date.parse(nextTableData.innerText)) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    //Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /*If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again.*/
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                        upTriangle.style.visibility = "hidden";
                        downTriangle.style.visibility = "visible";
                    }
                }
            }

        }
    </script>

    <script>
        /*Script_7f93fc1a6ee040718d57e78df9d58200
        sorts table by name by click on table head*/

        function sortTable_Script_21a191e39d5d4e93afa2a2d0a230a902(element, n) {
            let upTriangle = element.getElementsByClassName("up")[0];
            let downTriangle = element.getElementsByClassName("down")[0];

            let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
            let table = element.parentElement.parentElement;
            switching = true;
            //Set the sorting direction to ascending:
            dir = "asc";
            upTriangle.style.visibility = "visible";
            downTriangle.style.visibility = "hidden";
            /*Make a loop that will continue until
            no switching has been done:*/
            while (switching) {
                //start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /*Loop through all table rows (except the
                first, which contains table headers):*/
                for (i = 1; i < (rows.length - 1); i++) {
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                    one from current row and one from the next:*/
                    tableData = rows[i].getElementsByTagName("TD")[n];
                    nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                    /*check if the two rows should switch place,
                    based on the direction, asc or desc:*/
                    if (dir == "asc") {
                        if (tableData.innerText > nextTableData.innerText) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (tableData.innerText < nextTableData.innerText) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    //Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /*If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again.*/
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                        upTriangle.style.visibility = "hidden";
                        downTriangle.style.visibility = "visible";
                    }
                }
            }

        }
    </script>

</div>